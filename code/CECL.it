Program(args) {
    cECLEnv = new TaskEnvironment(name: "cECL")
    bind_input(cECLEnv, "domain", args.domain)
    execute(task: "cECL"; environment: cECLEnv)
}

Task "cECL":
	Define:
		domain,
		x,
		y,
		z: 1d Array of Real double-precision
	   	
		volume, 
        area,
        charLength: Real double-precision	
	
	Environment:
		domain: link
	
	Initialize:
		
        x.dimension1.range.min = 0
		x.dimension1.range.max = 8
	
		y.dimension1.range.min = 0
		y.dimension1.range.max = 8
		
		z.dimension1.range.min = 0
		z.dimension1.range.max = 8

	Stages: 
        areaFace(x0, x1, x2, x3, y0, y1, y2, y3, z0, z1, z2, z3, area) {
            fx = (x2 - x0) - (x3 - x1)
            fy = (y2 - y0) - (y3 - y1)
            fz = (z2 - z0) - (z3 - z1)
            gx = (x2 - x0) + (x3 - x1)
            gy = (y2 - y0) + (y3 - y1)
            gz = (z2 - z0) + (z3 - z1)
            area = (fx * fx + fy * fy + fz * fz) * (gx * gx + gy * gy + gz * gz) - (fx * gx + fy * gy + fz * gz) * (fx * gx + fy * gy + fz * gz) 
        }

    Computation:
        Space A {
        
        areaFace(x[0],x[1],x[2],x[3], y[0],y[1],y[2],y[3], z[0],z[1],z[2],z[3],area) 
   
        //charLength = max(a,charLength) 

        areaFace(x[4],x[5],x[6],x[7], y[4],y[5],y[6],y[7], z[4],z[5],z[6],z[7],area) 
   
        //charLength = std::max(a,charLength) 

        areaFace(x[0],x[1],x[5],x[4],y[0],y[1],y[5],y[4],z[0],z[1],z[5],z[4],area) 
        
        //charLength = std::max(a,charLength) 

        areaFace(x[1],x[2],x[6],x[5], y[1],y[2],y[6],y[5],z[1],z[2],z[6],z[5],area) 
   
        //charLength = std::max(a,charLength) 
    
        areaFace(x[2],x[3],x[7],x[6],y[2],y[3],y[7],y[6],z[2],z[3],z[7],z[6],area) 
   
        //charLength = std::max(a,charLength) 
        
        areaFace(x[3],x[0],x[4],x[7], y[3],y[0],y[4],y[7], z[3],z[0],z[4],z[7],area) 
   
        //charLength = std::max(a,charLength) 

        //charLength = Real_t(4.0) * volume / SQRT(charLength)

        }

    Partition: 
        Space A <un-partitioned> {x,y,z}
